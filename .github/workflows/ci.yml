name: ci

on:
  pull_request:
  push:
    branches: [develop, main]
    tags: ["[0-9]+.[0-9]+.[0-9]+*"]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    env:
      HATCH_ENV_TYPE_VIRTUAL_PATH: ".venv"
      HATCH_ENV: "ci"
      HATCH_VERSION: "1.14.1"
      PIPX_VERSION: "1.7.1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up pip cache
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install pipx for Python ${{ matrix.python-version }}
        run: python -m pip install "pipx==$PIPX_VERSION"
      - name: Install Hatch
        run: pipx install "hatch==$HATCH_VERSION"
      - name: Test Hatch version
        run: |
          HATCH_VERSION_INSTALLED=$(hatch --version)
          echo "The HATCH_VERSION environment variable is set to $HATCH_VERSION."
          echo "The installed Hatch version is ${HATCH_VERSION_INSTALLED##Hatch, version }."
          case $HATCH_VERSION_INSTALLED in
          *$HATCH_VERSION) echo "Hatch version correct." ;;
          *) echo "Hatch version incorrect." && exit 1 ;;
          esac
      - name: Install dependencies
        run: hatch env create ci
      - name: Test virtualenv location
        run: |
          EXPECTED_VIRTUALENV_PATH="$GITHUB_WORKSPACE/$HATCH_ENV_TYPE_VIRTUAL_PATH"
          INSTALLED_VIRTUALENV_PATH=$(hatch env find)
          echo "The virtualenv should be at $EXPECTED_VIRTUALENV_PATH."
          echo "Hatch is using a virtualenv at $INSTALLED_VIRTUALENV_PATH."
          case "$INSTALLED_VIRTUALENV_PATH" in
          "$EXPECTED_VIRTUALENV_PATH") echo "Correct Hatch virtualenv." ;;
          *) echo "Incorrect Hatch virtualenv." && exit 1 ;;
          esac
      - name: Test that Git tag version and Python package version match
        if: github.ref_type == 'tag' && matrix.python-version == '3.13'
        run: |
          GIT_TAG_VERSION=$GITHUB_REF_NAME
          PACKAGE_VERSION=$(hatch version)
          echo "The Python package version is $PACKAGE_VERSION."
          echo "The Git tag version is $GIT_TAG_VERSION."
          if [ "$PACKAGE_VERSION" = "$GIT_TAG_VERSION" ]; then
            echo "Versions match."
          else
            echo "Versions do not match." && exit 1
          fi
      - name: Run Hatch script for code quality checks
        run: hatch run ${{ env.HATCH_ENV }}:check
      - name: Run tests
        run: hatch run coverage run
      - name: Enforce test coverage
        run: hatch run coverage report
      - name: Build Python package
        run: hatch build
      - name: Publish Python package to PyPI
        if: github.ref_type == 'tag' && matrix.python-version == '3.13'
        run: hatch publish -n -u __token__ -a ${{ secrets.PYPI_TOKEN }}
  changelog:
    if: github.ref_type == 'tag'
    needs: [ci]
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop
      - name: Generate changelog from Git tags
        run: |
          echo '# Changelog
          ' >docs/changelog.md

          GIT_LOG_FORMAT='## %(subject) - %(taggerdate:short)

          %(contents:body)
          Tagger: %(taggername) %(taggeremail)

          Date: %(taggerdate:iso)

          ```text
          %(contents:signature)```
          '

          git tag -l --sort=-taggerdate:iso --format="$GIT_LOG_FORMAT" >>docs/changelog.md
      - name: Format changelog with Prettier
        run: npx -s -y prettier@'^3' --write docs/changelog.md
      - name: Create pull request with updated changelog
        uses: peter-evans/create-pull-request@v7
        with:
          add-paths: |
            docs/changelog.md
          branch: create-pull-request/${{ github.ref_name }}
          commit-message: Update changelog for version ${{ github.ref_name }}
          sign-commits: true
          title: Update changelog for version ${{ github.ref_name }}
