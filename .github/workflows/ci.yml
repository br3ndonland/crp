name: ci

on:
  pull_request:
  push:
    branches: [main]
    tags: ["[0-9]+.[0-9]+.[0-9]+*"]
  workflow_dispatch:
    inputs:
      environment:
        description: GitHub Actions deployment environment
        required: false
        type: environment
      generate_changelog:
        description: Run the changelog generation job.
        type: boolean
        default: false

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment-name: ${{ steps.set-env.outputs.environment-name }}
      environment-url: ${{ steps.set-env.outputs.environment-url }}
      repo-name: ${{ steps.set-env.outputs.repo-name }}
    steps:
      - uses: actions/checkout@v4
      - name: Set GitHub Actions deployment environment
        id: set-env
        run: |
          repo_name=${GITHUB_REPOSITORY##*/}
          if ${{ github.event_name == 'workflow_dispatch' }}; then
            environment_name=${{ inputs.environment }}
          elif ${{ github.ref_type == 'tag' }}; then
            environment_name="PyPI"
          else
            environment_name=""
          fi
          if [ "$environment_name" = "PyPI" ]; then
            url="https://pypi.org/project/$repo_name/"
            environment_url="$url$GITHUB_REF_NAME/"
          else
            timestamp="$(date -Iseconds)"
            url="https://api.github.com/repos/$GITHUB_REPOSITORY/deployments"
            environment_url="$url?timestamp=$timestamp"
          fi
          echo "environment-name=$environment_name" >>"$GITHUB_OUTPUT"
          echo "environment-url=$environment_url" >>"$GITHUB_OUTPUT"
          echo "repo-name=$repo_name" >>"$GITHUB_OUTPUT"
      - name: Create annotation for deployment environment
        if: steps.set-env.outputs.environment-name != ''
        run: echo "::notice::Deployment environment ${{ steps.set-env.outputs.environment-name }}"
  ci:
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    env:
      HATCH_ENV_TYPE_VIRTUAL_PATH: ".venv"
      HATCH_ENV: "ci"
      HATCH_VERSION: "1.14.1"
      PIPX_VERSION: "1.7.1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up pip cache
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install pipx for Python ${{ matrix.python-version }}
        run: python -m pip install "pipx==$PIPX_VERSION"
      - name: Install Hatch
        run: pipx install "hatch==$HATCH_VERSION"
      - name: Test Hatch version
        run: |
          HATCH_VERSION_INSTALLED=$(hatch --version)
          echo "The HATCH_VERSION environment variable is set to $HATCH_VERSION."
          echo "The installed Hatch version is ${HATCH_VERSION_INSTALLED##Hatch, version }."
          case $HATCH_VERSION_INSTALLED in
          *$HATCH_VERSION) echo "Hatch version correct." ;;
          *) echo "Hatch version incorrect." && exit 1 ;;
          esac
      - name: Install dependencies
        run: hatch env create ci
      - name: Test virtualenv location
        run: |
          EXPECTED_VIRTUALENV_PATH="$GITHUB_WORKSPACE/$HATCH_ENV_TYPE_VIRTUAL_PATH"
          INSTALLED_VIRTUALENV_PATH=$(hatch env find)
          echo "The virtualenv should be at $EXPECTED_VIRTUALENV_PATH."
          echo "Hatch is using a virtualenv at $INSTALLED_VIRTUALENV_PATH."
          case "$INSTALLED_VIRTUALENV_PATH" in
          "$EXPECTED_VIRTUALENV_PATH") echo "Correct Hatch virtualenv." ;;
          *) echo "Incorrect Hatch virtualenv." && exit 1 ;;
          esac
      - name: Test that Git tag version and Python package version match
        if: github.ref_type == 'tag' && matrix.python-version == '3.13'
        run: |
          GIT_TAG_VERSION=$GITHUB_REF_NAME
          PACKAGE_VERSION=$(hatch version)
          echo "The Python package version is $PACKAGE_VERSION."
          echo "The Git tag version is $GIT_TAG_VERSION."
          if [ "$PACKAGE_VERSION" = "$GIT_TAG_VERSION" ]; then
            echo "Versions match."
          else
            echo "Versions do not match." && exit 1
          fi
      - name: Run Hatch script for code quality checks
        run: hatch run ${{ env.HATCH_ENV }}:check
      - name: Run tests
        run: hatch run ${{ env.HATCH_ENV }}:coverage run
      - name: Enforce test coverage
        run: |
          hatch run ${{ env.HATCH_ENV }}:coverage combine -q
          hatch run ${{ env.HATCH_ENV }}:coverage report
      - name: Build Python package
        run: hatch build
      - name: Upload Python package artifacts
        if: >
          github.ref_type == 'tag' &&
          matrix.python-version == '3.13' &&
          needs.setup.outputs.environment-name == 'PyPI'
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${{ needs.setup.outputs.repo-name }}-${{ github.ref_name }}
          path: dist
  pypi:
    environment:
      name: ${{ needs.setup.outputs.environment-name }}
      url: ${{ needs.setup.outputs.environment-url }}
    if: github.ref_type == 'tag' && needs.setup.outputs.environment-name == 'PyPI'
    needs: [setup, ci]
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Download Python package artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          name: ${{ needs.setup.outputs.repo-name }}-${{ github.ref_name }}
          path: dist
      - name: Publish Python package to PyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
  changelog:
    environment:
      name: ${{ needs.setup.outputs.environment-name }}
      url: ${{ needs.setup.outputs.environment-url }}
    if: >-
      (github.ref_type == 'tag' && needs.setup.outputs.environment-name == 'PyPI') ||
      (github.event_name == 'workflow_dispatch' && needs.setup.outputs.environment-name == 'Production')
    needs: [setup, ci]
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Generate changelog from Git tags
        run: |
          echo '# Changelog
          ' >docs/changelog.md

          GIT_LOG_FORMAT='## %(subject) - %(taggerdate:short)

          %(contents:body)
          Tagger: %(taggername) %(taggeremail)

          Date: %(taggerdate:iso)

          ```text
          %(contents:signature)```
          '

          git tag -l --sort=-taggerdate:iso --format="$GIT_LOG_FORMAT" >>docs/changelog.md
      - name: Format changelog with Prettier
        run: npx -s -y prettier@'^3' --write docs/changelog.md
      - name: Set PR and commit title
        id: set-title
        run: |
          if [ "$GITHUB_REF_TYPE" = 'tag' ]; then
            title="Update changelog for version $GITHUB_REF_NAME"
          else
            most_recent_tag=$(git describe --abbrev=0 --tags)
            title="Update changelog for version $most_recent_tag"
          fi
          echo "title=$title" >>"$GITHUB_OUTPUT"
      - name: Create pull request with updated changelog
        uses: peter-evans/create-pull-request@v7
        with:
          add-paths: |
            docs/changelog.md
          branch: create-pull-request/${{ github.ref_name }}
          commit-message: ${{ steps.set-title.outputs.title }}
          sign-commits: true
          title: ${{ steps.set-title.outputs.title }}
